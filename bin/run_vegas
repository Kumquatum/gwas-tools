#!/usr/bin/env nextflow

params.out = '.'

params.gencode = 28
params.genome = 'GRCh38'
ped = file(params.ped)
map = file(params.map)

process download_hgnc {

    output:
        file 'non_alt_loci_set.txt' into hgnc

    script:
    template 'dbs/hgnc.sh'
    
}

process download_gencode {

    input:
        val GENCODE_VERSION from params.gencode
        val GENOME_VERSION from params.genome

    output:
        file 'gff3' into gff
    
    script:
    template 'dbs/gencode.sh'

}

process create_ensembl_glist {

    input:
        file gff

    output:
        file 'glist_ensembl' into glist_ensembl

    """
    awk '{if(\$3=="gene" || \$3=="pseugene"){print \$0}}' $gff >genes.gff
    gff2bed < genes.gff | cut -f1-4 | sed 's/\\..\\+\$//' | sed 's/^chr//' >tmp
    sed 's/^XY/25/' tmp | sed 's/^X/23/' | sed 's/^Y/24/' >glist_ensembl
    """

}

process convert_glist_to_hgnc {

    input:
        file glist_ensembl
        file hgnc

    output:
        file 'glist_hgnc' into glist_hgnc

    """
    #!/usr/bin/env Rscript
	library(tidyverse)
	
	ensembl2hgnc <- read_tsv('$hgnc') %>%
		select(symbol, ensembl_gene_id)

    read_tsv('$glist_ensembl', col_names=F, col_types = 'iiic') %>% 
        filter(!is.na(X1)) %>%
        inner_join(ensembl2hgnc, by = c('X4' = 'ensembl_gene_id')) %>% 
        select(-X4) %>%
        write_delim('glist_hgnc', col_names = FALSE)
    """

}

process compute_chisq {

    input:
        file PED from ped
        file MAP from map

    output:
        file 'snp_association' into snp_association

    """
    #!/usr/bin/env Rscript
    library(tidyverse)
	library(snpStats)

    gwas <- read.pedfile('${PED}', snps = '${MAP}')
    subject.info <- data.frame(cc = gwas\$fam\$affected, 
                               stratum = rep("EUR", nrow(gwas\$fam)))

    tests <- single.snp.tests(gwas\$fam\$affected,
                              data = subject.info,
                              snp.data = gwas\$genotypes)

    gwas\$map %>%
        rename(chr = V1, pos = V4, snp = snp.names) %>%
        mutate(p = p.value(tests, df=1)) %>%
        select(snp, p) %>%
        filter(!is.na(p)) %>%
        write_tsv('snp_association', col_names = FALSE)
    """

}

process make_bed {

    input:
        file PED from ped
        file MAP from map

    output:
        file 'out.bed' into bed
        file 'out.bim' into bim
        file 'out.fam' into fam

    """
    plink --file ${PED.baseName} --make-bed --out out
    """

}

process run_vegas {

    publishDir "$params.out", overwrite: true, mode: "copy"

    input:
        file BED from bed
        file bim
        file fam
        file SNPASSOCIATION from snp_association
        file GLIST from glist_hgnc

    output:
        file 'scored_genes.out'

    """
    vegas2v2 -G -snpandp ${SNPASSOCIATION} -custom ${BED.baseName} -glist ${GLIST} -out scored_genes
    """

}