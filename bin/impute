#!/usr/bin/env nextflow

chunk_size = 5000000

bed = file(params.bfile)
bim = file("${bed.baseName}.bim")
fam = file("${bed.baseName}.fam")

strand_info = file(params.strand_info)
params.out = '.'
params.genome = 'GRCh38'

populations = [ 'ACB': 96 , 'ASW': 61 , 'BEB': 86 , 'CDX': 93 , 'CEU': 99 , 
                'CHB': 103 , 'CHS': 105 , 'CLM': 94 , 'ESN': 99 , 'FIN': 99 , 
                'GBR': 91 , 'GIH': 103 , 'GWD': 113 , 'IBS': 107 , 'ITU': 102 , 
                'JPT': 104 , 'KHV': 99 , 'LWK': 99 , 'MSL': 85 , 'MXL': 64 , 
                'PEL': 85 , 'PJL': 96 , 'PUR': 104 , 'STU': 102 , 'TSI': 107 , 
                'YRI': 108 ]
superpopulations = [ 'AMR': ['CLM','MXL','PEL','PUR'],
                     'SAS': ['BEB','GIH','ITU','PJL','STU'],
                     'EAS': ['CDX','CHB','CHD','CHS','JPT','KHV'],
                     'EUR': ['CEU','IBS','FIN','GBR','TSI'],
                     'AFR': ['ACB','ASW','ESN','GWD','LWK','MSL','YRI'] ]

if (params.population in populations) {
    num_samples_ref = populations[params.population]
} else {
    num_samples_ref = 0
    for (p in superpopulations[params.population]) {
        num_samples_ref += populations[p]
    }
}

if (params.reference == null) {

    process download_1k_genomes {

        publishDir '1000GP_Phase3', mode: 'move'

        output:
            file '1000GP_Phase3_*.legend.gz' into legends
            file 'genetic_map_*'
            file '1000GP_Phase3_*.hap.gz'
            file '1000GP_Phase3.sample'

        '''
        wget https://mathgen.stats.ox.ac.uk/impute/1000GP_Phase3.tgz
        tar -xzf 1000GP_Phase3.tgz && mv 1000GP_Phase3/* .
        rm 1000GP_Phase3.tgz && rmdir 1000GP_Phase3
        wget https://mathgen.stats.ox.ac.uk/impute/1000GP_Phase3_chrX.tgz
        tar -xzf 1000GP_Phase3_chrX.tgz && rm 1000GP_Phase3_chrX.tgz
        '''

    }

    reference = file('1000GP_Phase3')

} else {

    reference = file(params.reference)
    legends = file("$reference/1000GP_Phase3_*.legend.gz")

}

process bed2ped {

    input:
        file BED from bed
        file bim
        file fam

    output:
        file 'plink.ped' into ped
        file 'plink.map' into map

    """
    plink --bfile ${BED.baseName} --recode
    """

}

process ped2gen {

    input:
        file PED from ped
        file MAP from map
    output:
        set 'out.gen','out.sample' into gen
	file 'out.sample' into sample

    script:
    template 'io/ped2gen.sh'

}

process chunk_genome {

    input:
        file MAP from bim
        val CHUNK_SIZE from chunk_size
        val GENOME from params.genome
    output:
        file 'chunks' into chunks_file

    script:
    template 'genotypes/chunk_map.py'

}

chunks = chunks_file
    .splitText()
    .map { it.strip().tokenize( '\t' ) }

process impute {

    tag { "${CHR}:${START}:${END}" }
    validExitStatus 0,77

    input:
        set CHR, START, END from chunks
        set file(GEN), file(SAMPLE) from gen
        file REFERENCE from reference
        file STRAND_INFO from strand_info
        val SAMPLES_REFERENCE from num_samples_ref

    output:
        file 'imputed.gen' into imputed_gens
        file 'out.sample' into imputed_samples

    script:
    template 'genotypes/impute_chunk.sh'

}

process merge_gens {

    input:
        file 'imputed*.gen' from imputed_gens.collect()
	file 'imputed*.sample' from imputed_samples.collect()

    output:
        set 'merged.gen', 'merged.sample' into imputed_gen

    script:
    template 'io/merge_gens.sh'

}

process gen2ped {

    input:
        set file(GEN), file(SAMPLE) from imputed_gen

    output:
        set 'out.ped','out.map' into imputed_peds

    script:
    template 'io/gen2ped.sh'

}

process ped2bed {

    publishDir "$params.out", overwrite: true, mode: "move"

    input:
        set file(PED), file(MAP) from imputed_peds

    output:
        file 'out.bed'
        file 'out.bim'
        file 'out.fam'

    script:
    template 'io/ped2bed.sh'

}

